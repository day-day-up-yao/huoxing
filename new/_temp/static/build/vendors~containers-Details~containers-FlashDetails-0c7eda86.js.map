{"version":3,"sources":["webpack:///./node_modules/qrcode.react/lib/index.js","webpack:///./node_modules/qr.js/lib/mode.js","webpack:///./node_modules/qr.js/lib/ErrorCorrectLevel.js","webpack:///./node_modules/qr.js/lib/Polynomial.js","webpack:///./node_modules/qr.js/lib/math.js","webpack:///./node_modules/qr.js/lib/QRCode.js","webpack:///./node_modules/qr.js/lib/8BitByte.js","webpack:///./node_modules/qr.js/lib/RSBlock.js","webpack:///./node_modules/qr.js/lib/BitBuffer.js","webpack:///./node_modules/qr.js/lib/util.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_extends","Object","assign","target","i","arguments","length","source","key","hasOwnProperty","call","apply","this","_objectSpread","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","_defineProperty","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","configurable","writable","defineProperty","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","_assertThisInitialized","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","value","_setPrototypeOf","p","ReferenceError","React","__webpack_require__","PropTypes","QRCodeImpl","ErrorCorrectLevel","convertStr","str","out","charcode","charCodeAt","String","fromCharCode","DEFAULT_PROPS","size","level","bgColor","fgColor","includeMargin","PROP_TYPES","string","isRequired","number","oneOf","bool","generatePath","modules","margin","undefined","ops","row","y","start","cell","x","push","join","SUPPORTS_PATH2D","Path2D","addPath","e","QRCodeCanvas","_React$PureComponent","_getPrototypeOf2","_this","_len","args","Array","_key","PureComponent","update","_this$props","qrcode","addData","make","_canvas","canvas","ctx","getContext","cells","numCells","pixelRatio","window","devicePixelRatio","height","width","scale","fillStyle","fillRect","fill","rdx","cdx","_this2","_this$props2","style","otherProps","canvasStyle","createElement","ref","_ref","QRCodeSVG","_React$PureComponent2","_this$props3","fgPath","shapeRendering","viewBox","d","QRCode","renderAs","Component","defaultProps","module","exports","MODE_NUMBER","MODE_ALPHA_NUM","MODE_8BIT_BYTE","MODE_KANJI","L","M","Q","H","math","QRPolynomial","num","shift","Error","offset","get","index","getLength","multiply","j","gexp","glog","mod","ratio","QRMath","n","LOG_TABLE","EXP_TABLE","BitByte","RSBlock","BitBuffer","util","Polynomial","typeNumber","errorCorrectLevel","moduleCount","dataCache","dataList","proto","data","newData","isDark","col","getModuleCount","rsBlocks","getRSBlocks","buffer","totalDataCount","dataCount","put","mode","getLengthInBits","write","makeImpl","getBestMaskPattern","test","maskPattern","setupPositionProbePattern","setupPositionAdjustPattern","setupTimingPattern","setupTypeInfo","setupTypeNumber","createData","mapData","r","c","minLostPoint","pattern","lostPoint","getLostPoint","createMovieClip","target_mc","instance_name","depth","qr_mc","createEmptyMovieClip","beginFill","moveTo","lineTo","endFill","pos","getPatternPosition","bits","getBCHTypeNumber","Math","floor","getBCHTypeInfo","inc","bitIndex","byteIndex","dark","getMask","PAD0","PAD1","putBit","createBytes","maxDcCount","maxEcCount","dcdata","ecdata","dcCount","ecCount","totalCount","max","rsPoly","getErrorCorrectPolynomial","modPoly","modIndex","totalCodeCount","QR8bitByte","ECL","QRRSBlock","RS_BLOCK_TABLE","rsBlock","getRsBlockTable","list","count","QRBitBuffer","bufIndex","bit","Mode","QRMaskPattern","QRUtil","PATTERN_POSITION_TABLE","G15","G18","G15_MASK","getBCHDigit","digit","errorCorrectLength","a","type","qrCode","sameCount","darkCount","abs"],"mappings":"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AiP,aACAjP,KAAA2L,YAGA+D,EAAAC,eAAA,CAQA,UACA,UACA,UACA,SAGA,UACA,UACA,UACA,UAGA,UACA,UACA,UACA,UAGA,WACA,UACA,UACA,SAGA,YACA,UACA,kBACA,kBAGA,UACA,UACA,UACA,UAGA,UACA,UACA,kBACA,kBAGA,WACA,kBACA,kBACA,kBAGA,YACA,kBACA,kBACA,kBAGA,kBACA,kBACA,kBACA,kBAGA,WACA,kBACA,kBACA,kBAGA,oBACA,kBACA,kBACA,kBAGA,YACA,kBACA,kBACA,mBAGA,sBACA,kBACA,mBACA,mBAGA,oBACA,kBACA,kBACA,WAGA,oBACA,kBACA,mBACA,mBAGA,sBACA,mBACA,mBACA,mBAGA,sBACA,kBACA,mBACA,mBAGA,sBACA,mBACA,mBACA,mBAGA,sBACA,mBACA,mBACA,oBAGA,sBACA,WACA,mBACA,mBAGA,sBACA,WACA,mBACA,WAGA,sBACA,mBACA,oBACA,oBAGA,sBACA,mBACA,oBACA,mBAGA,sBACA,mBACA,mBACA,oBAGA,uBACA,mBACA,mBACA,mBAGA,sBACA,mBACA,mBACA,oBAGA,uBACA,mBACA,mBACA,oBAGA,sBACA,mBACA,mBACA,oBAGA,uBACA,oBACA,oBACA,oBAGA,uBACA,mBACA,mBACA,oBAGA,aACA,oBACA,oBACA,oBAGA,uBACA,oBACA,oBACA,oBAGA,uBACA,oBACA,mBACA,mBAGA,uBACA,oBACA,oBACA,oBAGA,uBACA,mBACA,oBACA,mBAGA,uBACA,oBACA,oBACA,oBAGA,uBACA,oBACA,oBACA,oBAGA,uBACA,mBACA,oBACA,oBAGA,uBACA,oBACA,oBACA,qBAGAD,EAAAlE,YAAA,SAAAZ,EAAAC,GAEA,IAAA+E,EAAAF,EAAAG,gBAAAjF,EAAAC,GAEA,GAAAlG,MAAAiL,EACA,UAAApG,MAAA,6BAAAoB,EAAA,sBAAAC,GAOA,IAJA,IAAAnL,EAAAkQ,EAAAlQ,OAAA,EAEAoQ,EAAA,IAAAhK,MAEAtG,EAAA,EAAgBA,EAAAE,EAAYF,IAM5B,IAJA,IAAAuQ,EAAAH,EAA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","file":"vendors~containers-Details~containers-FlashDetails-0c7eda86.js","sourcesContent":["'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar React = require('react');\n\nvar PropTypes = require('prop-types'); // qr.js doesn't handle error level of zero (M) so we need to do it right,\n// thus the deep require.\n\n\nvar QRCodeImpl = require('qr.js/lib/QRCode');\n\nvar ErrorCorrectLevel = require('qr.js/lib/ErrorCorrectLevel'); // Convert from UTF-16, forcing the use of byte-mode encoding in our QR Code.\n// This allows us to encode Hanji, Kanji, emoji, etc. Ideally we'd do more\n// detection and not resort to byte-mode if possible, but we're trading off\n// a smaller library for a smaller amount of data we can potentially encode.\n// Based on http://jonisalonen.com/2012/from-utf-16-to-utf-8-in-javascript/\n\n\nfunction convertStr(str) {\n  var out = '';\n\n  for (var i = 0; i < str.length; i++) {\n    var charcode = str.charCodeAt(i);\n\n    if (charcode < 0x0080) {\n      out += String.fromCharCode(charcode);\n    } else if (charcode < 0x0800) {\n      out += String.fromCharCode(0xc0 | charcode >> 6);\n      out += String.fromCharCode(0x80 | charcode & 0x3f);\n    } else if (charcode < 0xd800 || charcode >= 0xe000) {\n      out += String.fromCharCode(0xe0 | charcode >> 12);\n      out += String.fromCharCode(0x80 | charcode >> 6 & 0x3f);\n      out += String.fromCharCode(0x80 | charcode & 0x3f);\n    } else {\n      // This is a surrogate pair, so we'll reconsitute the pieces and work\n      // from that\n      i++;\n      charcode = 0x10000 + ((charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);\n      out += String.fromCharCode(0xf0 | charcode >> 18);\n      out += String.fromCharCode(0x80 | charcode >> 12 & 0x3f);\n      out += String.fromCharCode(0x80 | charcode >> 6 & 0x3f);\n      out += String.fromCharCode(0x80 | charcode & 0x3f);\n    }\n  }\n\n  return out;\n}\n\nvar DEFAULT_PROPS = {\n  size: 128,\n  level: 'L',\n  bgColor: '#FFFFFF',\n  fgColor: '#000000',\n  includeMargin: false\n};\nvar PROP_TYPES = {\n  value: PropTypes.string.isRequired,\n  size: PropTypes.number,\n  level: PropTypes.oneOf(['L', 'M', 'Q', 'H']),\n  bgColor: PropTypes.string,\n  fgColor: PropTypes.string,\n  includeMargin: PropTypes.bool\n};\nvar MARGIN_SIZE = 4;\n\nfunction generatePath(modules) {\n  var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var ops = [];\n  modules.forEach(function (row, y) {\n    var start = null;\n    row.forEach(function (cell, x) {\n      if (!cell && start !== null) {\n        // M0 0h7v1H0z injects the space with the move and drops the comma,\n        // saving a char per operation\n        ops.push(\"M\".concat(start + margin, \" \").concat(y + margin, \"h\").concat(x - start, \"v1H\").concat(start + margin, \"z\"));\n        start = null;\n        return;\n      } // end of row, clean up or skip\n\n\n      if (x === row.length - 1) {\n        if (!cell) {\n          // We would have closed the op above already so this can only mean\n          // 2+ light modules in a row.\n          return;\n        }\n\n        if (start === null) {\n          // Just a single dark module.\n          ops.push(\"M\".concat(x + margin, \",\").concat(y + margin, \" h1v1H\").concat(x + margin, \"z\"));\n        } else {\n          // Otherwise finish the current line.\n          ops.push(\"M\".concat(start + margin, \",\").concat(y + margin, \" h\").concat(x + 1 - start, \"v1H\").concat(start + margin, \"z\"));\n        }\n\n        return;\n      }\n\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join('');\n} // For canvas we're going to switch our drawing mode based on whether or not\n// the environment supports Path2D. We only need the constructor to be\n// supported, but Edge doesn't actually support the path (string) type\n// argument. Luckily it also doesn't support the addPath() method. We can\n// treat that as the same thing.\n\n\nvar SUPPORTS_PATH2D = function () {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}();\n\nvar QRCodeCanvas =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(QRCodeCanvas, _React$PureComponent);\n\n  function QRCodeCanvas() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, QRCodeCanvas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(QRCodeCanvas)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_canvas\", void 0);\n\n    return _this;\n  }\n\n  _createClass(QRCodeCanvas, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.update();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          size = _this$props.size,\n          level = _this$props.level,\n          bgColor = _this$props.bgColor,\n          fgColor = _this$props.fgColor,\n          includeMargin = _this$props.includeMargin; // We'll use type===-1 to force QRCode to automatically pick the best type\n\n      var qrcode = new QRCodeImpl(-1, ErrorCorrectLevel[level]);\n      qrcode.addData(convertStr(value));\n      qrcode.make();\n\n      if (this._canvas != null) {\n        var canvas = this._canvas;\n        var ctx = canvas.getContext('2d');\n\n        if (!ctx) {\n          return;\n        }\n\n        var cells = qrcode.modules;\n\n        if (cells === null) {\n          return;\n        }\n\n        var margin = includeMargin ? MARGIN_SIZE : 0;\n        var numCells = cells.length + margin * 2; // We're going to scale this so that the number of drawable units\n        // matches the number of cells. This avoids rounding issues, but does\n        // result in some potentially unwanted single pixel issues between\n        // blocks, only in environments that don't support Path2D.\n\n        var pixelRatio = window.devicePixelRatio || 1;\n        canvas.height = canvas.width = size * pixelRatio;\n        var scale = size / numCells * pixelRatio;\n        ctx.scale(scale, scale); // Draw solid background, only paint dark modules.\n\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, numCells, numCells);\n        ctx.fillStyle = fgColor;\n\n        if (SUPPORTS_PATH2D) {\n          // $FlowFixMe: Path2D c'tor doesn't support args yet.\n          ctx.fill(new Path2D(generatePath(cells, margin)));\n        } else {\n          cells.forEach(function (row, rdx) {\n            row.forEach(function (cell, cdx) {\n              if (cell) {\n                ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n              }\n            });\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          value = _this$props2.value,\n          size = _this$props2.size,\n          level = _this$props2.level,\n          bgColor = _this$props2.bgColor,\n          fgColor = _this$props2.fgColor,\n          style = _this$props2.style,\n          includeMargin = _this$props2.includeMargin,\n          otherProps = _objectWithoutProperties(_this$props2, [\"value\", \"size\", \"level\", \"bgColor\", \"fgColor\", \"style\", \"includeMargin\"]);\n\n      var canvasStyle = _objectSpread({\n        height: size,\n        width: size\n      }, style);\n\n      return React.createElement(\"canvas\", _extends({\n        style: canvasStyle,\n        height: size,\n        width: size,\n        ref: function ref(_ref) {\n          return _this2._canvas = _ref;\n        }\n      }, otherProps));\n    }\n  }]);\n\n  return QRCodeCanvas;\n}(React.PureComponent);\n\n_defineProperty(QRCodeCanvas, \"defaultProps\", DEFAULT_PROPS);\n\n_defineProperty(QRCodeCanvas, \"propTypes\", PROP_TYPES);\n\nvar QRCodeSVG =\n/*#__PURE__*/\nfunction (_React$PureComponent2) {\n  _inherits(QRCodeSVG, _React$PureComponent2);\n\n  function QRCodeSVG() {\n    _classCallCheck(this, QRCodeSVG);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(QRCodeSVG).apply(this, arguments));\n  }\n\n  _createClass(QRCodeSVG, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          value = _this$props3.value,\n          size = _this$props3.size,\n          level = _this$props3.level,\n          bgColor = _this$props3.bgColor,\n          fgColor = _this$props3.fgColor,\n          includeMargin = _this$props3.includeMargin,\n          otherProps = _objectWithoutProperties(_this$props3, [\"value\", \"size\", \"level\", \"bgColor\", \"fgColor\", \"includeMargin\"]); // We'll use type===-1 to force QRCode to automatically pick the best type\n\n\n      var qrcode = new QRCodeImpl(-1, ErrorCorrectLevel[level]);\n      qrcode.addData(convertStr(value));\n      qrcode.make();\n      var cells = qrcode.modules;\n\n      if (cells === null) {\n        return null;\n      }\n\n      var margin = includeMargin ? MARGIN_SIZE : 0; // Drawing strategy: instead of a rect per module, we're going to create a\n      // single path for the dark modules and layer that on top of a light rect,\n      // for a total of 2 DOM nodes. We pay a bit more in string concat but that's\n      // way faster than DOM ops.\n      // For level 1, 441 nodes -> 2\n      // For level 40, 31329 -> 2\n\n      var fgPath = generatePath(cells, margin);\n      var numCells = cells.length + margin * 2;\n      return React.createElement(\"svg\", _extends({\n        shapeRendering: \"crispEdges\",\n        height: size,\n        width: size,\n        viewBox: \"0 0 \".concat(numCells, \" \").concat(numCells)\n      }, otherProps), React.createElement(\"path\", {\n        fill: bgColor,\n        d: \"M0,0 h\".concat(numCells, \"v\").concat(numCells, \"H0z\")\n      }), React.createElement(\"path\", {\n        fill: fgColor,\n        d: fgPath\n      }));\n    }\n  }]);\n\n  return QRCodeSVG;\n}(React.PureComponent);\n\n_defineProperty(QRCodeSVG, \"defaultProps\", DEFAULT_PROPS);\n\n_defineProperty(QRCodeSVG, \"propTypes\", PROP_TYPES);\n\nvar QRCode = function QRCode(props) {\n  var renderAs = props.renderAs,\n      otherProps = _objectWithoutProperties(props, [\"renderAs\"]);\n\n  var Component = renderAs === 'svg' ? QRCodeSVG : QRCodeCanvas;\n  return React.createElement(Component, otherProps);\n};\n\nQRCode.defaultProps = _objectSpread({\n  renderAs: 'canvas'\n}, DEFAULT_PROPS);\nmodule.exports = QRCode;","module.exports = {\n\tMODE_NUMBER :\t\t1 << 0,\n\tMODE_ALPHA_NUM : \t1 << 1,\n\tMODE_8BIT_BYTE : \t1 << 2,\n\tMODE_KANJI :\t\t1 << 3\n};\n","module.exports = {\n\tL : 1,\n\tM : 0,\n\tQ : 3,\n\tH : 2\n};\n\n","var math = require('./math');\n\nfunction QRPolynomial(num, shift) {\n\n\tif (num.length == undefined) {\n\t\tthrow new Error(num.length + \"/\" + shift);\n\t}\n\n\tvar offset = 0;\n\n\twhile (offset < num.length && num[offset] == 0) {\n\t\toffset++;\n\t}\n\n\tthis.num = new Array(num.length - offset + shift);\n\tfor (var i = 0; i < num.length - offset; i++) {\n\t\tthis.num[i] = num[i + offset];\n\t}\n}\n\nQRPolynomial.prototype = {\n\n\tget : function(index) {\n\t\treturn this.num[index];\n\t},\n\t\n\tgetLength : function() {\n\t\treturn this.num.length;\n\t},\n\t\n\tmultiply : function(e) {\n\t\n\t\tvar num = new Array(this.getLength() + e.getLength() - 1);\n\t\n\t\tfor (var i = 0; i < this.getLength(); i++) {\n\t\t\tfor (var j = 0; j < e.getLength(); j++) {\n\t\t\t\tnum[i + j] ^= math.gexp(math.glog(this.get(i) ) + math.glog(e.get(j) ) );\n\t\t\t}\n\t\t}\n\t\n\t\treturn new QRPolynomial(num, 0);\n\t},\n\t\n\tmod : function(e) {\n\t\n\t\tif (this.getLength() - e.getLength() < 0) {\n\t\t\treturn this;\n\t\t}\n\t\n\t\tvar ratio = math.glog(this.get(0) ) - math.glog(e.get(0) );\n\t\n\t\tvar num = new Array(this.getLength() );\n\t\t\n\t\tfor (var i = 0; i < this.getLength(); i++) {\n\t\t\tnum[i] = this.get(i);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < e.getLength(); i++) {\n\t\t\tnum[i] ^= math.gexp(math.glog(e.get(i) ) + ratio);\n\t\t}\n\t\n\t\t// recursive call\n\t\treturn new QRPolynomial(num, 0).mod(e);\n\t}\n};\n\nmodule.exports = QRPolynomial;\n","var QRMath = {\n\n\tglog : function(n) {\n\t\n\t\tif (n < 1) {\n\t\t\tthrow new Error(\"glog(\" + n + \")\");\n\t\t}\n\t\t\n\t\treturn QRMath.LOG_TABLE[n];\n\t},\n\t\n\tgexp : function(n) {\n\t\n\t\twhile (n < 0) {\n\t\t\tn += 255;\n\t\t}\n\t\n\t\twhile (n >= 256) {\n\t\t\tn -= 255;\n\t\t}\n\t\n\t\treturn QRMath.EXP_TABLE[n];\n\t},\n\t\n\tEXP_TABLE : new Array(256),\n\t\n\tLOG_TABLE : new Array(256)\n\n};\n\t\nfor (var i = 0; i < 8; i++) {\n\tQRMath.EXP_TABLE[i] = 1 << i;\n}\nfor (var i = 8; i < 256; i++) {\n\tQRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4]\n\t\t^ QRMath.EXP_TABLE[i - 5]\n\t\t^ QRMath.EXP_TABLE[i - 6]\n\t\t^ QRMath.EXP_TABLE[i - 8];\n}\nfor (var i = 0; i < 255; i++) {\n\tQRMath.LOG_TABLE[QRMath.EXP_TABLE[i] ] = i;\n}\n\nmodule.exports = QRMath;\n","var BitByte = require('./8BitByte');\nvar RSBlock = require('./RSBlock');\nvar BitBuffer = require('./BitBuffer');\nvar util = require('./util');\nvar Polynomial = require('./Polynomial');\n\nfunction QRCode(typeNumber, errorCorrectLevel) {\n\tthis.typeNumber = typeNumber;\n\tthis.errorCorrectLevel = errorCorrectLevel;\n\tthis.modules = null;\n\tthis.moduleCount = 0;\n\tthis.dataCache = null;\n\tthis.dataList = [];\n}\n\n// for client side minification\nvar proto = QRCode.prototype;\n\nproto.addData = function(data) {\n\tvar newData = new BitByte(data);\n\tthis.dataList.push(newData);\n\tthis.dataCache = null;\n};\n\nproto.isDark = function(row, col) {\n\tif (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {\n\t\tthrow new Error(row + \",\" + col);\n\t}\n\treturn this.modules[row][col];\n};\n\nproto.getModuleCount = function() {\n\treturn this.moduleCount;\n};\n\nproto.make = function() {\n\t// Calculate automatically typeNumber if provided is < 1\n\tif (this.typeNumber < 1 ){\n\t\tvar typeNumber = 1;\n\t\tfor (typeNumber = 1; typeNumber < 40; typeNumber++) {\n\t\t\tvar rsBlocks = RSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);\n\n\t\t\tvar buffer = new BitBuffer();\n\t\t\tvar totalDataCount = 0;\n\t\t\tfor (var i = 0; i < rsBlocks.length; i++) {\n\t\t\t\ttotalDataCount += rsBlocks[i].dataCount;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < this.dataList.length; i++) {\n\t\t\t\tvar data = this.dataList[i];\n\t\t\t\tbuffer.put(data.mode, 4);\n\t\t\t\tbuffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber) );\n\t\t\t\tdata.write(buffer);\n\t\t\t}\n\t\t\tif (buffer.getLengthInBits() <= totalDataCount * 8)\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.typeNumber = typeNumber;\n\t}\n\tthis.makeImpl(false, this.getBestMaskPattern() );\n};\n\nproto.makeImpl = function(test, maskPattern) {\n\t\n\tthis.moduleCount = this.typeNumber * 4 + 17;\n\tthis.modules = new Array(this.moduleCount);\n\t\n\tfor (var row = 0; row < this.moduleCount; row++) {\n\t\t\n\t\tthis.modules[row] = new Array(this.moduleCount);\n\t\t\n\t\tfor (var col = 0; col < this.moduleCount; col++) {\n\t\t\tthis.modules[row][col] = null;//(col + row) % 3;\n\t\t}\n\t}\n\n\tthis.setupPositionProbePattern(0, 0);\n\tthis.setupPositionProbePattern(this.moduleCount - 7, 0);\n\tthis.setupPositionProbePattern(0, this.moduleCount - 7);\n\tthis.setupPositionAdjustPattern();\n\tthis.setupTimingPattern();\n\tthis.setupTypeInfo(test, maskPattern);\n\t\n\tif (this.typeNumber >= 7) {\n\t\tthis.setupTypeNumber(test);\n\t}\n\n\tif (this.dataCache == null) {\n\t\tthis.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\n\t}\n\n\tthis.mapData(this.dataCache, maskPattern);\n};\n\nproto.setupPositionProbePattern = function(row, col)  {\n\t\n\tfor (var r = -1; r <= 7; r++) {\n\t\t\n\t\tif (row + r <= -1 || this.moduleCount <= row + r) continue;\n\t\t\n\t\tfor (var c = -1; c <= 7; c++) {\n\t\t\t\n\t\t\tif (col + c <= -1 || this.moduleCount <= col + c) continue;\n\t\t\t\n\t\t\tif ( (0 <= r && r <= 6 && (c == 0 || c == 6) )\n\t\t\t\t\t|| (0 <= c && c <= 6 && (r == 0 || r == 6) )\n\t\t\t\t\t|| (2 <= r && r <= 4 && 2 <= c && c <= 4) ) {\n\t\t\t\tthis.modules[row + r][col + c] = true;\n\t\t\t} else {\n\t\t\t\tthis.modules[row + r][col + c] = false;\n\t\t\t}\n\t\t}\t\t\n\t}\t\t\n};\n\nproto.getBestMaskPattern = function() {\n\n\tvar minLostPoint = 0;\n\tvar pattern = 0;\n\n\tfor (var i = 0; i < 8; i++) {\n\t\t\n\t\tthis.makeImpl(true, i);\n\n\t\tvar lostPoint = util.getLostPoint(this);\n\n\t\tif (i == 0 || minLostPoint >  lostPoint) {\n\t\t\tminLostPoint = lostPoint;\n\t\t\tpattern = i;\n\t\t}\n\t}\n\n\treturn pattern;\n};\n\nproto.createMovieClip = function(target_mc, instance_name, depth) {\n\n\tvar qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);\n\tvar cs = 1;\n\n\tthis.make();\n\n\tfor (var row = 0; row < this.modules.length; row++) {\n\t\t\n\t\tvar y = row * cs;\n\t\t\n\t\tfor (var col = 0; col < this.modules[row].length; col++) {\n\n\t\t\tvar x = col * cs;\n\t\t\tvar dark = this.modules[row][col];\n\t\t\n\t\t\tif (dark) {\n\t\t\t\tqr_mc.beginFill(0, 100);\n\t\t\t\tqr_mc.moveTo(x, y);\n\t\t\t\tqr_mc.lineTo(x + cs, y);\n\t\t\t\tqr_mc.lineTo(x + cs, y + cs);\n\t\t\t\tqr_mc.lineTo(x, y + cs);\n\t\t\t\tqr_mc.endFill();\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn qr_mc;\n};\n\nproto.setupTimingPattern = function() {\n\t\n\tfor (var r = 8; r < this.moduleCount - 8; r++) {\n\t\tif (this.modules[r][6] != null) {\n\t\t\tcontinue;\n\t\t}\n\t\tthis.modules[r][6] = (r % 2 == 0);\n\t}\n\n\tfor (var c = 8; c < this.moduleCount - 8; c++) {\n\t\tif (this.modules[6][c] != null) {\n\t\t\tcontinue;\n\t\t}\n\t\tthis.modules[6][c] = (c % 2 == 0);\n\t}\n};\n\nproto.setupPositionAdjustPattern = function() {\n\n\tvar pos = util.getPatternPosition(this.typeNumber);\n\t\n\tfor (var i = 0; i < pos.length; i++) {\n\t\n\t\tfor (var j = 0; j < pos.length; j++) {\n\t\t\n\t\t\tvar row = pos[i];\n\t\t\tvar col = pos[j];\n\t\t\t\n\t\t\tif (this.modules[row][col] != null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tfor (var r = -2; r <= 2; r++) {\n\t\t\t\n\t\t\t\tfor (var c = -2; c <= 2; c++) {\n\t\t\t\t\n\t\t\t\t\tif (r == -2 || r == 2 || c == -2 || c == 2\n\t\t\t\t\t\t\t|| (r == 0 && c == 0) ) {\n\t\t\t\t\t\tthis.modules[row + r][col + c] = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.modules[row + r][col + c] = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nproto.setupTypeNumber = function(test) {\n\n\tvar bits = util.getBCHTypeNumber(this.typeNumber);\n\n\tfor (var i = 0; i < 18; i++) {\n\t\tvar mod = (!test && ( (bits >> i) & 1) == 1);\n\t\tthis.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;\n\t}\n\n\tfor (var i = 0; i < 18; i++) {\n\t\tvar mod = (!test && ( (bits >> i) & 1) == 1);\n\t\tthis.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n\t}\n};\n\nproto.setupTypeInfo = function(test, maskPattern) {\n\n\tvar data = (this.errorCorrectLevel << 3) | maskPattern;\n\tvar bits = util.getBCHTypeInfo(data);\n\n\t// vertical\t\t\n\tfor (var i = 0; i < 15; i++) {\n\n\t\tvar mod = (!test && ( (bits >> i) & 1) == 1);\n\n\t\tif (i < 6) {\n\t\t\tthis.modules[i][8] = mod;\n\t\t} else if (i < 8) {\n\t\t\tthis.modules[i + 1][8] = mod;\n\t\t} else {\n\t\t\tthis.modules[this.moduleCount - 15 + i][8] = mod;\n\t\t}\n\t}\n\n\t// horizontal\n\tfor (var i = 0; i < 15; i++) {\n\n\t\tvar mod = (!test && ( (bits >> i) & 1) == 1);\n\t\t\n\t\tif (i < 8) {\n\t\t\tthis.modules[8][this.moduleCount - i - 1] = mod;\n\t\t} else if (i < 9) {\n\t\t\tthis.modules[8][15 - i - 1 + 1] = mod;\n\t\t} else {\n\t\t\tthis.modules[8][15 - i - 1] = mod;\n\t\t}\n\t}\n\n\t// fixed module\n\tthis.modules[this.moduleCount - 8][8] = (!test);\n};\n\nproto.mapData = function(data, maskPattern) {\n\t\n\tvar inc = -1;\n\tvar row = this.moduleCount - 1;\n\tvar bitIndex = 7;\n\tvar byteIndex = 0;\n\t\n\tfor (var col = this.moduleCount - 1; col > 0; col -= 2) {\n\n\t\tif (col == 6) col--;\n\n\t\twhile (true) {\n\n\t\t\tfor (var c = 0; c < 2; c++) {\n\t\t\t\t\n\t\t\t\tif (this.modules[row][col - c] == null) {\n\t\t\t\t\t\n\t\t\t\t\tvar dark = false;\n\n\t\t\t\t\tif (byteIndex < data.length) {\n\t\t\t\t\t\tdark = ( ( (data[byteIndex] >>> bitIndex) & 1) == 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar mask = util.getMask(maskPattern, row, col - c);\n\n\t\t\t\t\tif (mask) {\n\t\t\t\t\t\tdark = !dark;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.modules[row][col - c] = dark;\n\t\t\t\t\tbitIndex--;\n\n\t\t\t\t\tif (bitIndex == -1) {\n\t\t\t\t\t\tbyteIndex++;\n\t\t\t\t\t\tbitIndex = 7;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\trow += inc;\n\n\t\t\tif (row < 0 || this.moduleCount <= row) {\n\t\t\t\trow -= inc;\n\t\t\t\tinc = -inc;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n};\n\nQRCode.PAD0 = 0xEC;\nQRCode.PAD1 = 0x11;\n\nQRCode.createData = function(typeNumber, errorCorrectLevel, dataList) {\n\t\n\tvar rsBlocks = RSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\n\t\n\tvar buffer = new BitBuffer();\n\t\n\tfor (var i = 0; i < dataList.length; i++) {\n\t\tvar data = dataList[i];\n\t\tbuffer.put(data.mode, 4);\n\t\tbuffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber) );\n\t\tdata.write(buffer);\n\t}\n\n\t// calc num max data.\n\tvar totalDataCount = 0;\n\tfor (var i = 0; i < rsBlocks.length; i++) {\n\t\ttotalDataCount += rsBlocks[i].dataCount;\n\t}\n\n\tif (buffer.getLengthInBits() > totalDataCount * 8) {\n\t\tthrow new Error(\"code length overflow. (\"\n\t\t\t+ buffer.getLengthInBits()\n\t\t\t+ \">\"\n\t\t\t+  totalDataCount * 8\n\t\t\t+ \")\");\n\t}\n\n\t// end code\n\tif (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n\t\tbuffer.put(0, 4);\n\t}\n\n\t// padding\n\twhile (buffer.getLengthInBits() % 8 != 0) {\n\t\tbuffer.putBit(false);\n\t}\n\n\t// padding\n\twhile (true) {\n\t\t\n\t\tif (buffer.getLengthInBits() >= totalDataCount * 8) {\n\t\t\tbreak;\n\t\t}\n\t\tbuffer.put(QRCode.PAD0, 8);\n\t\t\n\t\tif (buffer.getLengthInBits() >= totalDataCount * 8) {\n\t\t\tbreak;\n\t\t}\n\t\tbuffer.put(QRCode.PAD1, 8);\n\t}\n\n\treturn QRCode.createBytes(buffer, rsBlocks);\n};\n\nQRCode.createBytes = function(buffer, rsBlocks) {\n\n\tvar offset = 0;\n\t\n\tvar maxDcCount = 0;\n\tvar maxEcCount = 0;\n\t\n\tvar dcdata = new Array(rsBlocks.length);\n\tvar ecdata = new Array(rsBlocks.length);\n\t\n\tfor (var r = 0; r < rsBlocks.length; r++) {\n\n\t\tvar dcCount = rsBlocks[r].dataCount;\n\t\tvar ecCount = rsBlocks[r].totalCount - dcCount;\n\n\t\tmaxDcCount = Math.max(maxDcCount, dcCount);\n\t\tmaxEcCount = Math.max(maxEcCount, ecCount);\n\t\t\n\t\tdcdata[r] = new Array(dcCount);\n\t\t\n\t\tfor (var i = 0; i < dcdata[r].length; i++) {\n\t\t\tdcdata[r][i] = 0xff & buffer.buffer[i + offset];\n\t\t}\n\t\toffset += dcCount;\n\t\t\n\t\tvar rsPoly = util.getErrorCorrectPolynomial(ecCount);\n\t\tvar rawPoly = new Polynomial(dcdata[r], rsPoly.getLength() - 1);\n\n\t\tvar modPoly = rawPoly.mod(rsPoly);\n\t\tecdata[r] = new Array(rsPoly.getLength() - 1);\n\t\tfor (var i = 0; i < ecdata[r].length; i++) {\n            var modIndex = i + modPoly.getLength() - ecdata[r].length;\n\t\t\tecdata[r][i] = (modIndex >= 0)? modPoly.get(modIndex) : 0;\n\t\t}\n\n\t}\n\t\n\tvar totalCodeCount = 0;\n\tfor (var i = 0; i < rsBlocks.length; i++) {\n\t\ttotalCodeCount += rsBlocks[i].totalCount;\n\t}\n\n\tvar data = new Array(totalCodeCount);\n\tvar index = 0;\n\n\tfor (var i = 0; i < maxDcCount; i++) {\n\t\tfor (var r = 0; r < rsBlocks.length; r++) {\n\t\t\tif (i < dcdata[r].length) {\n\t\t\t\tdata[index++] = dcdata[r][i];\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (var i = 0; i < maxEcCount; i++) {\n\t\tfor (var r = 0; r < rsBlocks.length; r++) {\n\t\t\tif (i < ecdata[r].length) {\n\t\t\t\tdata[index++] = ecdata[r][i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn data;\n};\n\nmodule.exports = QRCode;\n\n","var mode = require('./mode');\n\nfunction QR8bitByte(data) {\n\tthis.mode = mode.MODE_8BIT_BYTE;\n\tthis.data = data;\n}\n\nQR8bitByte.prototype = {\n\n\tgetLength : function(buffer) {\n\t\treturn this.data.length;\n\t},\n\t\n\twrite : function(buffer) {\n\t\tfor (var i = 0; i < this.data.length; i++) {\n\t\t\t// not JIS ...\n\t\t\tbuffer.put(this.data.charCodeAt(i), 8);\n\t\t}\n\t}\n};\n\nmodule.exports = QR8bitByte;\n\n","// ErrorCorrectLevel\nvar ECL = require('./ErrorCorrectLevel');\n\nfunction QRRSBlock(totalCount, dataCount) {\n\tthis.totalCount = totalCount;\n\tthis.dataCount  = dataCount;\n}\n\nQRRSBlock.RS_BLOCK_TABLE = [\n\n\t// L\n\t// M\n\t// Q\n\t// H\n\n\t// 1\n\t[1, 26, 19],\n\t[1, 26, 16],\n\t[1, 26, 13],\n\t[1, 26, 9],\n\t\n\t// 2\n\t[1, 44, 34],\n\t[1, 44, 28],\n\t[1, 44, 22],\n\t[1, 44, 16],\n\n\t// 3\n\t[1, 70, 55],\n\t[1, 70, 44],\n\t[2, 35, 17],\n\t[2, 35, 13],\n\n\t// 4\t\t\n\t[1, 100, 80],\n\t[2, 50, 32],\n\t[2, 50, 24],\n\t[4, 25, 9],\n\t\n\t// 5\n\t[1, 134, 108],\n\t[2, 67, 43],\n\t[2, 33, 15, 2, 34, 16],\n\t[2, 33, 11, 2, 34, 12],\n\t\n\t// 6\n\t[2, 86, 68],\n\t[4, 43, 27],\n\t[4, 43, 19],\n\t[4, 43, 15],\n\t\n\t// 7\t\t\n\t[2, 98, 78],\n\t[4, 49, 31],\n\t[2, 32, 14, 4, 33, 15],\n\t[4, 39, 13, 1, 40, 14],\n\t\n\t// 8\n\t[2, 121, 97],\n\t[2, 60, 38, 2, 61, 39],\n\t[4, 40, 18, 2, 41, 19],\n\t[4, 40, 14, 2, 41, 15],\n\t\n\t// 9\n\t[2, 146, 116],\n\t[3, 58, 36, 2, 59, 37],\n\t[4, 36, 16, 4, 37, 17],\n\t[4, 36, 12, 4, 37, 13],\n\t\n\t// 10\t\t\n\t[2, 86, 68, 2, 87, 69],\n\t[4, 69, 43, 1, 70, 44],\n\t[6, 43, 19, 2, 44, 20],\n\t[6, 43, 15, 2, 44, 16],\n\n\t// 11\n\t[4, 101, 81],\n\t[1, 80, 50, 4, 81, 51],\n\t[4, 50, 22, 4, 51, 23],\n\t[3, 36, 12, 8, 37, 13],\n\n\t// 12\n\t[2, 116, 92, 2, 117, 93],\n\t[6, 58, 36, 2, 59, 37],\n\t[4, 46, 20, 6, 47, 21],\n\t[7, 42, 14, 4, 43, 15],\n\n\t// 13\n\t[4, 133, 107],\n\t[8, 59, 37, 1, 60, 38],\n\t[8, 44, 20, 4, 45, 21],\n\t[12, 33, 11, 4, 34, 12],\n\n\t// 14\n\t[3, 145, 115, 1, 146, 116],\n\t[4, 64, 40, 5, 65, 41],\n\t[11, 36, 16, 5, 37, 17],\n\t[11, 36, 12, 5, 37, 13],\n\n\t// 15\n\t[5, 109, 87, 1, 110, 88],\n\t[5, 65, 41, 5, 66, 42],\n\t[5, 54, 24, 7, 55, 25],\n\t[11, 36, 12],\n\n\t// 16\n\t[5, 122, 98, 1, 123, 99],\n\t[7, 73, 45, 3, 74, 46],\n\t[15, 43, 19, 2, 44, 20],\n\t[3, 45, 15, 13, 46, 16],\n\n\t// 17\n\t[1, 135, 107, 5, 136, 108],\n\t[10, 74, 46, 1, 75, 47],\n\t[1, 50, 22, 15, 51, 23],\n\t[2, 42, 14, 17, 43, 15],\n\n\t// 18\n\t[5, 150, 120, 1, 151, 121],\n\t[9, 69, 43, 4, 70, 44],\n\t[17, 50, 22, 1, 51, 23],\n\t[2, 42, 14, 19, 43, 15],\n\n\t// 19\n\t[3, 141, 113, 4, 142, 114],\n\t[3, 70, 44, 11, 71, 45],\n\t[17, 47, 21, 4, 48, 22],\n\t[9, 39, 13, 16, 40, 14],\n\n\t// 20\n\t[3, 135, 107, 5, 136, 108],\n\t[3, 67, 41, 13, 68, 42],\n\t[15, 54, 24, 5, 55, 25],\n\t[15, 43, 15, 10, 44, 16],\n\n\t// 21\n\t[4, 144, 116, 4, 145, 117],\n\t[17, 68, 42],\n\t[17, 50, 22, 6, 51, 23],\n\t[19, 46, 16, 6, 47, 17],\n\n\t// 22\n\t[2, 139, 111, 7, 140, 112],\n\t[17, 74, 46],\n\t[7, 54, 24, 16, 55, 25],\n\t[34, 37, 13],\n\n\t// 23\n\t[4, 151, 121, 5, 152, 122],\n\t[4, 75, 47, 14, 76, 48],\n\t[11, 54, 24, 14, 55, 25],\n\t[16, 45, 15, 14, 46, 16],\n\n\t// 24\n\t[6, 147, 117, 4, 148, 118],\n\t[6, 73, 45, 14, 74, 46],\n\t[11, 54, 24, 16, 55, 25],\n\t[30, 46, 16, 2, 47, 17],\n\n\t// 25\n\t[8, 132, 106, 4, 133, 107],\n\t[8, 75, 47, 13, 76, 48],\n\t[7, 54, 24, 22, 55, 25],\n\t[22, 45, 15, 13, 46, 16],\n\n\t// 26\n\t[10, 142, 114, 2, 143, 115],\n\t[19, 74, 46, 4, 75, 47],\n\t[28, 50, 22, 6, 51, 23],\n\t[33, 46, 16, 4, 47, 17],\n\n\t// 27\n\t[8, 152, 122, 4, 153, 123],\n\t[22, 73, 45, 3, 74, 46],\n\t[8, 53, 23, 26, 54, 24],\n\t[12, 45, 15, 28, 46, 16],\n\n\t// 28\n\t[3, 147, 117, 10, 148, 118],\n\t[3, 73, 45, 23, 74, 46],\n\t[4, 54, 24, 31, 55, 25],\n\t[11, 45, 15, 31, 46, 16],\n\n\t// 29\n\t[7, 146, 116, 7, 147, 117],\n\t[21, 73, 45, 7, 74, 46],\n\t[1, 53, 23, 37, 54, 24],\n\t[19, 45, 15, 26, 46, 16],\n\n\t// 30\n\t[5, 145, 115, 10, 146, 116],\n\t[19, 75, 47, 10, 76, 48],\n\t[15, 54, 24, 25, 55, 25],\n\t[23, 45, 15, 25, 46, 16],\n\n\t// 31\n\t[13, 145, 115, 3, 146, 116],\n\t[2, 74, 46, 29, 75, 47],\n\t[42, 54, 24, 1, 55, 25],\n\t[23, 45, 15, 28, 46, 16],\n\n\t// 32\n\t[17, 145, 115],\n\t[10, 74, 46, 23, 75, 47],\n\t[10, 54, 24, 35, 55, 25],\n\t[19, 45, 15, 35, 46, 16],\n\n\t// 33\n\t[17, 145, 115, 1, 146, 116],\n\t[14, 74, 46, 21, 75, 47],\n\t[29, 54, 24, 19, 55, 25],\n\t[11, 45, 15, 46, 46, 16],\n\n\t// 34\n\t[13, 145, 115, 6, 146, 116],\n\t[14, 74, 46, 23, 75, 47],\n\t[44, 54, 24, 7, 55, 25],\n\t[59, 46, 16, 1, 47, 17],\n\n\t// 35\n\t[12, 151, 121, 7, 152, 122],\n\t[12, 75, 47, 26, 76, 48],\n\t[39, 54, 24, 14, 55, 25],\n\t[22, 45, 15, 41, 46, 16],\n\n\t// 36\n\t[6, 151, 121, 14, 152, 122],\n\t[6, 75, 47, 34, 76, 48],\n\t[46, 54, 24, 10, 55, 25],\n\t[2, 45, 15, 64, 46, 16],\n\n\t// 37\n\t[17, 152, 122, 4, 153, 123],\n\t[29, 74, 46, 14, 75, 47],\n\t[49, 54, 24, 10, 55, 25],\n\t[24, 45, 15, 46, 46, 16],\n\n\t// 38\n\t[4, 152, 122, 18, 153, 123],\n\t[13, 74, 46, 32, 75, 47],\n\t[48, 54, 24, 14, 55, 25],\n\t[42, 45, 15, 32, 46, 16],\n\n\t// 39\n\t[20, 147, 117, 4, 148, 118],\n\t[40, 75, 47, 7, 76, 48],\n\t[43, 54, 24, 22, 55, 25],\n\t[10, 45, 15, 67, 46, 16],\n\n\t// 40\n\t[19, 148, 118, 6, 149, 119],\n\t[18, 75, 47, 31, 76, 48],\n\t[34, 54, 24, 34, 55, 25],\n\t[20, 45, 15, 61, 46, 16]\n];\n\nQRRSBlock.getRSBlocks = function(typeNumber, errorCorrectLevel) {\n\t\n\tvar rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);\n\t\n\tif (rsBlock == undefined) {\n\t\tthrow new Error(\"bad rs block @ typeNumber:\" + typeNumber + \"/errorCorrectLevel:\" + errorCorrectLevel);\n\t}\n\n\tvar length = rsBlock.length / 3;\n\t\n\tvar list = new Array();\n\t\n\tfor (var i = 0; i < length; i++) {\n\n\t\tvar count = rsBlock[i * 3 + 0];\n\t\tvar totalCount = rsBlock[i * 3 + 1];\n\t\tvar dataCount  = rsBlock[i * 3 + 2];\n\n\t\tfor (var j = 0; j < count; j++) {\n\t\t\tlist.push(new QRRSBlock(totalCount, dataCount) );\t\n\t\t}\n\t}\n\t\n\treturn list;\n}\n\nQRRSBlock.getRsBlockTable = function(typeNumber, errorCorrectLevel) {\n\n\tswitch(errorCorrectLevel) {\n\tcase ECL.L :\n\t\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n\tcase ECL.M :\n\t\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n\tcase ECL.Q :\n\t\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n\tcase ECL.H :\n\t\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n\tdefault :\n\t\treturn undefined;\n\t}\n}\n\nmodule.exports = QRRSBlock;\n","function QRBitBuffer() {\n\tthis.buffer = new Array();\n\tthis.length = 0;\n}\n\nQRBitBuffer.prototype = {\n\n\tget : function(index) {\n\t\tvar bufIndex = Math.floor(index / 8);\n\t\treturn ( (this.buffer[bufIndex] >>> (7 - index % 8) ) & 1) == 1;\n\t},\n\t\n\tput : function(num, length) {\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tthis.putBit( ( (num >>> (length - i - 1) ) & 1) == 1);\n\t\t}\n\t},\n\t\n\tgetLengthInBits : function() {\n\t\treturn this.length;\n\t},\n\t\n\tputBit : function(bit) {\n\t\n\t\tvar bufIndex = Math.floor(this.length / 8);\n\t\tif (this.buffer.length <= bufIndex) {\n\t\t\tthis.buffer.push(0);\n\t\t}\n\t\n\t\tif (bit) {\n\t\t\tthis.buffer[bufIndex] |= (0x80 >>> (this.length % 8) );\n\t\t}\n\t\n\t\tthis.length++;\n\t}\n};\n\nmodule.exports = QRBitBuffer;\n","var Mode = require('./mode');\nvar Polynomial = require('./Polynomial');\nvar math = require('./math');\n\nvar QRMaskPattern = {\n\tPATTERN000 : 0,\n\tPATTERN001 : 1,\n\tPATTERN010 : 2,\n\tPATTERN011 : 3,\n\tPATTERN100 : 4,\n\tPATTERN101 : 5,\n\tPATTERN110 : 6,\n\tPATTERN111 : 7\n};\n\nvar QRUtil = {\n\n    PATTERN_POSITION_TABLE : [\n\t    [],\n\t    [6, 18],\n\t    [6, 22],\n\t    [6, 26],\n\t    [6, 30],\n\t    [6, 34],\n\t    [6, 22, 38],\n\t    [6, 24, 42],\n\t    [6, 26, 46],\n\t    [6, 28, 50],\n\t    [6, 30, 54],\t\t\n\t    [6, 32, 58],\n\t    [6, 34, 62],\n\t    [6, 26, 46, 66],\n\t    [6, 26, 48, 70],\n\t    [6, 26, 50, 74],\n\t    [6, 30, 54, 78],\n\t    [6, 30, 56, 82],\n\t    [6, 30, 58, 86],\n\t    [6, 34, 62, 90],\n\t    [6, 28, 50, 72, 94],\n\t    [6, 26, 50, 74, 98],\n\t    [6, 30, 54, 78, 102],\n\t    [6, 28, 54, 80, 106],\n\t    [6, 32, 58, 84, 110],\n\t    [6, 30, 58, 86, 114],\n\t    [6, 34, 62, 90, 118],\n\t    [6, 26, 50, 74, 98, 122],\n\t    [6, 30, 54, 78, 102, 126],\n\t    [6, 26, 52, 78, 104, 130],\n\t    [6, 30, 56, 82, 108, 134],\n\t    [6, 34, 60, 86, 112, 138],\n\t    [6, 30, 58, 86, 114, 142],\n\t    [6, 34, 62, 90, 118, 146],\n\t    [6, 30, 54, 78, 102, 126, 150],\n\t    [6, 24, 50, 76, 102, 128, 154],\n\t    [6, 28, 54, 80, 106, 132, 158],\n\t    [6, 32, 58, 84, 110, 136, 162],\n\t    [6, 26, 54, 82, 110, 138, 166],\n\t    [6, 30, 58, 86, 114, 142, 170]\n    ],\n\n    G15 : (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0),\n    G18 : (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0),\n    G15_MASK : (1 << 14) | (1 << 12) | (1 << 10)\t| (1 << 4) | (1 << 1),\n\n    getBCHTypeInfo : function(data) {\n\t    var d = data << 10;\n\t    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {\n\t\t    d ^= (QRUtil.G15 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) ) ); \t\n\t    }\n\t    return ( (data << 10) | d) ^ QRUtil.G15_MASK;\n    },\n\n    getBCHTypeNumber : function(data) {\n\t    var d = data << 12;\n\t    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {\n\t\t    d ^= (QRUtil.G18 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) ) ); \t\n\t    }\n\t    return (data << 12) | d;\n    },\n\n    getBCHDigit : function(data) {\n\n\t    var digit = 0;\n\n\t    while (data != 0) {\n\t\t    digit++;\n\t\t    data >>>= 1;\n\t    }\n\n\t    return digit;\n    },\n\n    getPatternPosition : function(typeNumber) {\n\t    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];\n    },\n\n    getMask : function(maskPattern, i, j) {\n\t    \n\t    switch (maskPattern) {\n\t\t    \n\t    case QRMaskPattern.PATTERN000 : return (i + j) % 2 == 0;\n\t    case QRMaskPattern.PATTERN001 : return i % 2 == 0;\n\t    case QRMaskPattern.PATTERN010 : return j % 3 == 0;\n\t    case QRMaskPattern.PATTERN011 : return (i + j) % 3 == 0;\n\t    case QRMaskPattern.PATTERN100 : return (Math.floor(i / 2) + Math.floor(j / 3) ) % 2 == 0;\n\t    case QRMaskPattern.PATTERN101 : return (i * j) % 2 + (i * j) % 3 == 0;\n\t    case QRMaskPattern.PATTERN110 : return ( (i * j) % 2 + (i * j) % 3) % 2 == 0;\n\t    case QRMaskPattern.PATTERN111 : return ( (i * j) % 3 + (i + j) % 2) % 2 == 0;\n\n\t    default :\n\t\t    throw new Error(\"bad maskPattern:\" + maskPattern);\n\t    }\n    },\n\n    getErrorCorrectPolynomial : function(errorCorrectLength) {\n\n\t    var a = new Polynomial([1], 0);\n\n\t    for (var i = 0; i < errorCorrectLength; i++) {\n\t\t    a = a.multiply(new Polynomial([1, math.gexp(i)], 0) );\n\t    }\n\n\t    return a;\n    },\n\n    getLengthInBits : function(mode, type) {\n\n\t    if (1 <= type && type < 10) {\n\n\t\t    // 1 - 9\n\n\t\t    switch(mode) {\n\t\t    case Mode.MODE_NUMBER \t: return 10;\n\t\t    case Mode.MODE_ALPHA_NUM \t: return 9;\n\t\t    case Mode.MODE_8BIT_BYTE\t: return 8;\n\t\t    case Mode.MODE_KANJI  \t: return 8;\n\t\t    default :\n\t\t\t    throw new Error(\"mode:\" + mode);\n\t\t    }\n\n\t    } else if (type < 27) {\n\n\t\t    // 10 - 26\n\n\t\t    switch(mode) {\n\t\t    case Mode.MODE_NUMBER \t: return 12;\n\t\t    case Mode.MODE_ALPHA_NUM \t: return 11;\n\t\t    case Mode.MODE_8BIT_BYTE\t: return 16;\n\t\t    case Mode.MODE_KANJI  \t: return 10;\n\t\t    default :\n\t\t\t    throw new Error(\"mode:\" + mode);\n\t\t    }\n\n\t    } else if (type < 41) {\n\n\t\t    // 27 - 40\n\n\t\t    switch(mode) {\n\t\t    case Mode.MODE_NUMBER \t: return 14;\n\t\t    case Mode.MODE_ALPHA_NUM\t: return 13;\n\t\t    case Mode.MODE_8BIT_BYTE\t: return 16;\n\t\t    case Mode.MODE_KANJI  \t: return 12;\n\t\t    default :\n\t\t\t    throw new Error(\"mode:\" + mode);\n\t\t    }\n\n\t    } else {\n\t\t    throw new Error(\"type:\" + type);\n\t    }\n    },\n\n    getLostPoint : function(qrCode) {\n\t    \n\t    var moduleCount = qrCode.getModuleCount();\n\t    \n\t    var lostPoint = 0;\n\t    \n\t    // LEVEL1\n\t    \n\t    for (var row = 0; row < moduleCount; row++) {\n\n\t\t    for (var col = 0; col < moduleCount; col++) {\n\n\t\t\t    var sameCount = 0;\n\t\t\t    var dark = qrCode.isDark(row, col);\n\n\t\t\t\tfor (var r = -1; r <= 1; r++) {\n\n\t\t\t\t    if (row + r < 0 || moduleCount <= row + r) {\n\t\t\t\t\t    continue;\n\t\t\t\t    }\n\n\t\t\t\t    for (var c = -1; c <= 1; c++) {\n\n\t\t\t\t\t    if (col + c < 0 || moduleCount <= col + c) {\n\t\t\t\t\t\t    continue;\n\t\t\t\t\t    }\n\n\t\t\t\t\t    if (r == 0 && c == 0) {\n\t\t\t\t\t\t    continue;\n\t\t\t\t\t    }\n\n\t\t\t\t\t    if (dark == qrCode.isDark(row + r, col + c) ) {\n\t\t\t\t\t\t    sameCount++;\n\t\t\t\t\t    }\n\t\t\t\t    }\n\t\t\t    }\n\n\t\t\t    if (sameCount > 5) {\n\t\t\t\t    lostPoint += (3 + sameCount - 5);\n\t\t\t    }\n\t\t    }\n\t    }\n\n\t    // LEVEL2\n\n\t    for (var row = 0; row < moduleCount - 1; row++) {\n\t\t    for (var col = 0; col < moduleCount - 1; col++) {\n\t\t\t    var count = 0;\n\t\t\t    if (qrCode.isDark(row,     col    ) ) count++;\n\t\t\t    if (qrCode.isDark(row + 1, col    ) ) count++;\n\t\t\t    if (qrCode.isDark(row,     col + 1) ) count++;\n\t\t\t    if (qrCode.isDark(row + 1, col + 1) ) count++;\n\t\t\t    if (count == 0 || count == 4) {\n\t\t\t\t    lostPoint += 3;\n\t\t\t    }\n\t\t    }\n\t    }\n\n\t    // LEVEL3\n\n\t    for (var row = 0; row < moduleCount; row++) {\n\t\t    for (var col = 0; col < moduleCount - 6; col++) {\n\t\t\t    if (qrCode.isDark(row, col)\n\t\t\t\t\t    && !qrCode.isDark(row, col + 1)\n\t\t\t\t\t    &&  qrCode.isDark(row, col + 2)\n\t\t\t\t\t    &&  qrCode.isDark(row, col + 3)\n\t\t\t\t\t    &&  qrCode.isDark(row, col + 4)\n\t\t\t\t\t    && !qrCode.isDark(row, col + 5)\n\t\t\t\t\t    &&  qrCode.isDark(row, col + 6) ) {\n\t\t\t\t    lostPoint += 40;\n\t\t\t    }\n\t\t    }\n\t    }\n\n\t    for (var col = 0; col < moduleCount; col++) {\n\t\t    for (var row = 0; row < moduleCount - 6; row++) {\n\t\t\t    if (qrCode.isDark(row, col)\n\t\t\t\t\t    && !qrCode.isDark(row + 1, col)\n\t\t\t\t\t    &&  qrCode.isDark(row + 2, col)\n\t\t\t\t\t    &&  qrCode.isDark(row + 3, col)\n\t\t\t\t\t    &&  qrCode.isDark(row + 4, col)\n\t\t\t\t\t    && !qrCode.isDark(row + 5, col)\n\t\t\t\t\t    &&  qrCode.isDark(row + 6, col) ) {\n\t\t\t\t    lostPoint += 40;\n\t\t\t    }\n\t\t    }\n\t    }\n\n\t    // LEVEL4\n\t    \n\t    var darkCount = 0;\n\n\t    for (var col = 0; col < moduleCount; col++) {\n\t\t    for (var row = 0; row < moduleCount; row++) {\n\t\t\t    if (qrCode.isDark(row, col) ) {\n\t\t\t\t    darkCount++;\n\t\t\t    }\n\t\t    }\n\t    }\n\t    \n\t    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n\t    lostPoint += ratio * 10;\n\n\t    return lostPoint;\t\t\n    }\n};\n\nmodule.exports = QRUtil;\n"],"sourceRoot":""}