{"version":3,"sources":["webpack:///./assets/redux/actions/mpRank.js","webpack:///./assets/containers/Mprank/index.js"],"names":["getRankMonth","params","axiosAjax","type","url","getMpRankList","_ref","asyncToGenerator_default","regenerator_default","a","mark","_callee","dispatch","data","wrap","_context","prev","next","noLoading","sent","code","GETMPRANKLIST","obj","abrupt","t0","ACTIONERROR","Error","stop","_x","apply","this","arguments","Mprank","state","typeList","typeIndex","month","secondType","addComma","num","number","toString","result","length","slice","getType","e","target","getAttribute","_this","setState","mpRankList","rankMonth","props","firstType","then","res","handleChangeMonth","value","_this2","_this3","_this$state","rankListObj","list","rankUserInfo","inforList","react_default","createElement","className","map","index","active","parseInt","onClick","typeId","key","typeName","onChange","item","style","height","formatTime","href","imgUrl","display","download","colorTd","id","width","mixUrl","main","concat","passportId","src","iconUrl","alt","vGrade","marginLeft","nickName","identityDesc","articleCount","readCount","effectPoint","Component","connect","mpRank"],"mappings":"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","file":"containers-Mprank-4340ff1b.js","sourcesContent":["import { axiosAjax } from 'multiPublic/index'\nimport {\n    GETMPRANKLIST\n} from '../constants/mpRank'\nimport { ACTIONERROR } from 'multiRedux/constants/public'\n/**\n * @desc 火星排行榜分类\n * @Params {params} params = {}\n */\nexport const getRankType = () => axiosAjax({\n    type: 'GET',\n    url: '/info/rank/type'\n})\n/**\n * @desc 火星排行榜时间\n * @Params {params} params = {firstType, secondType}\n */\nexport const getRankMonth = (params) => axiosAjax({\n    type: 'GET',\n    url: '/info/rank/month/list',\n    params: params\n})\n\n/** ---------------------------------------- redux ajax ---------------------------------------- */\n\n/**\n * @desc 火星排行榜\n * @Params {params}\n * firstType 1级分类\n * secondType 2级分类\n * rankMonth 排行榜时间戳13位（榜单月份1号0点0分0秒）\n */\nexport const getMpRankList = (params) => {\n    return async dispatch => {\n        try {\n            let url = '/info/rank/msg'\n            const data = await axiosAjax({\n                type: 'GET',\n                url: url,\n                params: params,\n                noLoading: true\n            })\n            if (data.code === 1) {\n                dispatch({\n                    type: GETMPRANKLIST,\n                    data: data.obj\n                })\n            }\n            return data\n        } catch (err) {\n            dispatch({\n                type: ACTIONERROR,\n                data: err\n            })\n            throw new Error(err)\n        }\n    }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { formatTime, mixUrl } from 'multiPublic/index'\nimport './index.scss'\nimport { getRankType, getRankMonth, getMpRankList } from '../../redux/actions/mpRank'\nclass Mprank extends Component {\n    state = {\n        typeList: [],\n        typeIndex: '1',\n        month: [],\n        secondType: 1\n    }\n    componentDidMount () {\n        getRankType().then(res => {\n            if (res.code === 1) {\n                const data = res.obj[1]\n                this.setState({\n                    typeList: data\n                })\n            }\n        })\n        this.mpRankList(1, null)\n        this.rankMonth()\n    }\n    /**\n     * @desc 数字格式化\n     * @returns {string}\n     */\n    addComma = (num) => {\n        let number = (num || 0).toString()\n\n        let result = ''\n        while (number.length > 3) {\n            result = ',' + number.slice(-3) + result\n            number = number.slice(0, number.length - 3)\n        }\n        if (number) {\n            result = number + result\n        }\n        return result\n    }\n    getType = (e) => {\n        const type = e.target.getAttribute('type')\n        this.setState({\n            secondType: type,\n            typeIndex: type\n        })\n        this.mpRankList(type, '')\n        this.rankMonth(type)\n    }\n    mpRankList = (secondType, rankMonth) => {\n        const { dispatch } = this.props\n        dispatch(getMpRankList({\n            firstType: 1,\n            secondType: secondType,\n            rankMonth: rankMonth\n        }))\n    }\n    rankMonth = (secondType) => {\n        getRankMonth({\n            firstType: 1,\n            secondType: secondType\n        }).then(res => {\n            if (res.code === 1) {\n                this.setState({\n                    month: res.obj\n                })\n            }\n        })\n    }\n    handleChangeMonth = (e) => {\n        const secondType = this.state.secondType\n        const rankMonth = e.target.value\n        this.mpRankList(secondType, rankMonth)\n    }\n\n    render () {\n        const { typeList, typeIndex, month } = this.state\n        const { rankListObj } = this.props\n        const list = rankListObj.rankUserInfo ? rankListObj.rankUserInfo.inforList : []\n        return <div className=\"mp-rank-box\">\n            <div className=\"rank-banner\"/>\n            <div className=\"rank-cont\">\n                <div className=\"cont-tab\">\n                    {\n                        typeList.map((res, index) => {\n                            let active = parseInt(typeIndex) === index + 1 ? 'active' : ''\n                            return <p onClick={this.getType} className={active} type={res.typeId} key={res.typeId}>{res.typeName}</p>\n                        })\n                    }\n                </div>\n                <div className=\"cont-date\">\n                    <select onChange={this.handleChangeMonth}>\n                        {\n                            month.map((item, index) => {\n                                return <option style={{ height: '30px' }} value={item} key={index}>{formatTime(item, 'yyyy年MM月')}</option>\n                            })\n                        }\n                    </select>\n                    <a href={rankListObj.imgUrl} target=\"_blank\" style={{ display: !rankListObj.imgUrl ? 'none' : 'block' }} download=\"logo.png\" className=\"download-img\"/>\n                </div>\n                <div className=\"cont-table\">\n                    <table>\n                        <thead>\n                            <tr>\n                                <td>排名</td>\n                                <td>MarsBit 专栏</td>\n                                <td>文章数</td>\n                                <td>热度</td>\n                                <td>影响力 <span>?</span><div className=\"hint\">影响力由MarsBit 专栏本月中发文量、阅读量、粉丝量、收藏量、分享量与推荐量综合计算得来。</div></td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                list.map((item, index) => {\n                                    let colorTd = ''\n                                    switch (index) {\n                                        case 0:\n                                            colorTd = 'one'\n                                            break\n                                        case 1:\n                                            colorTd = 'two'\n                                            break\n                                        case 2:\n                                            colorTd = 'three'\n                                            break\n                                    }\n                                    return <tr key={item.id} style={{ width: '700px' }}>\n                                        <td className={colorTd}>{index + 1}</td>\n                                        <td>\n                                            <a href={mixUrl.main(`/userCenter/${item.passportId}`)} target=\"_blank\">\n                                                <img className=\"td-img\" src={item.iconUrl} alt=\"\"/>\n                                                <span className={`${item.vGrade === 1 ? 'personal' : 'enterprise'}`}/>\n                                                <div style={{ marginLeft: '25px' }}>\n                                                    <h6>{item.nickName}</h6>\n                                                    <p>{item.identityDesc}</p>\n                                                </div>\n                                            </a>\n                                        </td>\n                                        <td>{this.addComma(item.articleCount)}</td>\n                                        <td>{this.addComma(item.readCount)}</td>\n                                        <td>{this.addComma(item.effectPoint)}</td>\n                                    </tr>\n                                })\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    }\n}\nconst mapStateToProps = (state) => ({\n    rankListObj: state.mpRank.rankListObj\n})\n\nexport default connect(mapStateToProps)(Mprank)\n"],"sourceRoot":""}