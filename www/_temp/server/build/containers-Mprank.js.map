{"version":3,"sources":["webpack:///./assets/redux/constants/mpRank.js","webpack:///./assets/redux/actions/mpRank.js","webpack:///./assets/containers/Mprank/index.js"],"names":["GETMPRANKLIST","getRankType","axiosAjax","type","url","getRankMonth","params","getMpRankList","dispatch","noLoading","data","code","obj","ACTIONERROR","Error","Mprank","state","typeList","typeIndex","month","secondType","addComma","num","number","toString","result","length","slice","getType","e","target","getAttribute","setState","mpRankList","rankMonth","props","firstType","then","res","handleChangeMonth","value","rankListObj","list","rankUserInfo","inforList","map","index","active","parseInt","typeId","typeName","item","height","formatTime","imgUrl","display","colorTd","id","width","mixUrl","main","passportId","iconUrl","vGrade","marginLeft","nickName","identityDesc","articleCount","readCount","effectPoint","Component","mapStateToProps","mpRank","connect"],"mappings":"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","file":"containers-Mprank.js","sourcesContent":["// 获取火星排行榜\nexport const GETMPRANKLIST = 'get-mprank-list'\n","import { axiosAjax } from 'multiPublic/index'\nimport {\n    GETMPRANKLIST\n} from '../constants/mpRank'\nimport { ACTIONERROR } from 'multiRedux/constants/public'\n/**\n * @desc 火星排行榜分类\n * @Params {params} params = {}\n */\nexport const getRankType = () => axiosAjax({\n    type: 'GET',\n    url: '/info/rank/type'\n})\n/**\n * @desc 火星排行榜时间\n * @Params {params} params = {firstType, secondType}\n */\nexport const getRankMonth = (params) => axiosAjax({\n    type: 'GET',\n    url: '/info/rank/month/list',\n    params: params\n})\n\n/** ---------------------------------------- redux ajax ---------------------------------------- */\n\n/**\n * @desc 火星排行榜\n * @Params {params}\n * firstType 1级分类\n * secondType 2级分类\n * rankMonth 排行榜时间戳13位（榜单月份1号0点0分0秒）\n */\nexport const getMpRankList = (params) => {\n    return async dispatch => {\n        try {\n            let url = '/info/rank/msg'\n            const data = await axiosAjax({\n                type: 'GET',\n                url: url,\n                params: params,\n                noLoading: true\n            })\n            if (data.code === 1) {\n                dispatch({\n                    type: GETMPRANKLIST,\n                    data: data.obj\n                })\n            }\n            return data\n        } catch (err) {\n            dispatch({\n                type: ACTIONERROR,\n                data: err\n            })\n            throw new Error(err)\n        }\n    }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { formatTime, mixUrl } from 'multiPublic/index'\nimport './index.scss'\nimport { getRankType, getRankMonth, getMpRankList } from '../../redux/actions/mpRank'\nclass Mprank extends Component {\n    state = {\n        typeList: [],\n        typeIndex: '1',\n        month: [],\n        secondType: 1\n    }\n    componentDidMount () {\n        getRankType().then(res => {\n            if (res.code === 1) {\n                const data = res.obj[1]\n                this.setState({\n                    typeList: data\n                })\n            }\n        })\n        this.mpRankList(1, null)\n        this.rankMonth()\n    }\n    /**\n     * @desc 数字格式化\n     * @returns {string}\n     */\n    addComma = (num) => {\n        let number = (num || 0).toString()\n\n        let result = ''\n        while (number.length > 3) {\n            result = ',' + number.slice(-3) + result\n            number = number.slice(0, number.length - 3)\n        }\n        if (number) {\n            result = number + result\n        }\n        return result\n    }\n    getType = (e) => {\n        const type = e.target.getAttribute('type')\n        this.setState({\n            secondType: type,\n            typeIndex: type\n        })\n        this.mpRankList(type, '')\n        this.rankMonth(type)\n    }\n    mpRankList = (secondType, rankMonth) => {\n        const { dispatch } = this.props\n        dispatch(getMpRankList({\n            firstType: 1,\n            secondType: secondType,\n            rankMonth: rankMonth\n        }))\n    }\n    rankMonth = (secondType) => {\n        getRankMonth({\n            firstType: 1,\n            secondType: secondType\n        }).then(res => {\n            if (res.code === 1) {\n                this.setState({\n                    month: res.obj\n                })\n            }\n        })\n    }\n    handleChangeMonth = (e) => {\n        const secondType = this.state.secondType\n        const rankMonth = e.target.value\n        this.mpRankList(secondType, rankMonth)\n    }\n\n    render () {\n        const { typeList, typeIndex, month } = this.state\n        const { rankListObj } = this.props\n        const list = rankListObj.rankUserInfo ? rankListObj.rankUserInfo.inforList : []\n        return <div className=\"mp-rank-box\">\n            <div className=\"rank-banner\"/>\n            <div className=\"rank-cont\">\n                <div className=\"cont-tab\">\n                    {\n                        typeList.map((res, index) => {\n                            let active = parseInt(typeIndex) === index + 1 ? 'active' : ''\n                            return <p onClick={this.getType} className={active} type={res.typeId} key={res.typeId}>{res.typeName}</p>\n                        })\n                    }\n                </div>\n                <div className=\"cont-date\">\n                    <select onChange={this.handleChangeMonth}>\n                        {\n                            month.map((item, index) => {\n                                return <option style={{ height: '30px' }} value={item} key={index}>{formatTime(item, 'yyyy年MM月')}</option>\n                            })\n                        }\n                    </select>\n                    <a href={rankListObj.imgUrl} target=\"_blank\" style={{ display: !rankListObj.imgUrl ? 'none' : 'block' }} download=\"logo.png\" className=\"download-img\"/>\n                </div>\n                <div className=\"cont-table\">\n                    <table>\n                        <thead>\n                            <tr>\n                                <td>排名</td>\n                                <td>MarsBit 专栏</td>\n                                <td>文章数</td>\n                                <td>热度</td>\n                                <td>影响力 <span>?</span><div className=\"hint\">影响力由MarsBit 专栏本月中发文量、阅读量、粉丝量、收藏量、分享量与推荐量综合计算得来。</div></td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                list.map((item, index) => {\n                                    let colorTd = ''\n                                    switch (index) {\n                                        case 0:\n                                            colorTd = 'one'\n                                            break\n                                        case 1:\n                                            colorTd = 'two'\n                                            break\n                                        case 2:\n                                            colorTd = 'three'\n                                            break\n                                    }\n                                    return <tr key={item.id} style={{ width: '700px' }}>\n                                        <td className={colorTd}>{index + 1}</td>\n                                        <td>\n                                            <a href={mixUrl.main(`/userCenter/${item.passportId}`)} target=\"_blank\">\n                                                <img className=\"td-img\" src={item.iconUrl} alt=\"\"/>\n                                                <span className={`${item.vGrade === 1 ? 'personal' : 'enterprise'}`}/>\n                                                <div style={{ marginLeft: '25px' }}>\n                                                    <h6>{item.nickName}</h6>\n                                                    <p>{item.identityDesc}</p>\n                                                </div>\n                                            </a>\n                                        </td>\n                                        <td>{this.addComma(item.articleCount)}</td>\n                                        <td>{this.addComma(item.readCount)}</td>\n                                        <td>{this.addComma(item.effectPoint)}</td>\n                                    </tr>\n                                })\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    }\n}\nconst mapStateToProps = (state) => ({\n    rankListObj: state.mpRank.rankListObj\n})\n\nexport default connect(mapStateToProps)(Mprank)\n"],"sourceRoot":""}